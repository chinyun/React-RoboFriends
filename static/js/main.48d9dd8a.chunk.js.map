{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","props","react_default","a","createElement","className","alt","src","concat","id","name","email","username","CardList","_ref","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","Component","App","onRequestRobots","_this$props","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","src_components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48d9dd8a.chunk.js","sourcesContent":["import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\n// should be a pure funcion\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true })\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false })\n    default:\n      return state;\n  }\n}\n","import React from 'react';\n\nconst Card = ( props ) => {\n\treturn (\n\t\t<div className='tc f6 bg-dark-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src= {`https://robohash.org/${props.id}?size=200x200`}/>\n\t\t\t<div className='light-green'>\n\t\t\t\t<h2>{ props.name }</h2>\n\t\t\t\t<p>{ props.email }</p>\n\t\t\t\t<p>{ props.username }</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user,i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card\n\t\t \t\t\t\t\tkey = {i}\n\t\t\t\t\t\t\tid = {robots[i].id} \n\t\t\t\t\t\t\tname = {robots[i].name} \n\t\t \t\t\t\t\temail = {robots[i].email}\n\t\t \t\t\t\t\tusername = {robots[i].username}\n\t\t\t\t\t\t/> \n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n\treturn (\n\t\t<div className = 'pa2'>\n\t\t\t<input \n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='search robots' \n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\tonChange={ searchChange } \n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;\n","import React from 'react';\nimport './Scroll.css'\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div className = 'scroll'>\n\t\t\t{ props.children }\n\t\t</div>\n\t);\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch (error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render () {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\n// dispatch the DOM changes to call an action. mapDispatchToProps returns a function \n// that returns an object then uses connect to change the data form reducers.\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: ( ) => dispatch(requestRobots())\n\t}\n}\n\n// because uses Redux to manage states there is no need to use this.state and this.setState\nclass App extends Component {\n\t// constructor() {\n\t// \tsuper()\n\t// \tthis.state = {\n\t// \t\trobots: [],\n\t\t\t// searchfield: ''\n\t// \t}\n\t// }\n\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t\t// fetch('https://jsonplaceholder.typicode.com/users')\n\t\t// \t.then(response => response.json())\n\t\t// \t.then(users => this.setState({ robots: users }));\n\t}\n\n\t// onSearchChange = ( event ) => {\n\t// \tthis.setState({ searchfield: event.target.value })\n\t// }\n\n\trender() {\n\t\t// const { robots } = this.state;\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\treturn (\n\t\t\t<div className='tc'>\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={ onSearchChange }/>\n\t\t\t\t<Scroll>\n\t\t\t\t{ isPending ? <h1> Loading </h1> :\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<CardList robots={ filteredRobots }/>\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t}\t\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// connect() is a higher order function, action done from mapDispatchToProps will \n// change state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\n// higher order function\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = \n  createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render( \n  <Provider store = { store }>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}